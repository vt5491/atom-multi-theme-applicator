// Generated by CoffeeScript 1.10.0
var $, LocalStylesElement, LocalThemeManager, LocalThemeSelectorView, Utils, jQuery;

$ = jQuery = require('jquery');

Utils = require('./utils');

LocalThemeManager = require('./local-theme-manager');

LocalStylesElement = require('./local-styles-element');

module.exports = LocalThemeSelectorView = (function() {
  LocalThemeSelectorView.prototype.selectorView = null;

  function LocalThemeSelectorView() {
    var form;
    this.localThemeManager = new LocalThemeManager();
    this.localStylesElement = new LocalStylesElement();
    this.utils = new Utils();
    this.selectorView = document.createElement('div');
    this.selectorView.classList.add('local-theme-selector-view');
    form = $('<form/>').attr({
      id: 'input-form'
    }).submit(this.applyLocalTheme.bind(this));
    form.appendTo(this.selectorView);
    $('<input/>').attr({
      type: 'text',
      name: 'theme'
    }).appendTo(form);
    $('<input/>').attr({
      type: 'submit',
      value: 'Apply Local Theme'
    }).appendTo(form);
  }

  LocalThemeSelectorView.prototype.applyLocalTheme = function() {
    var css, newStyleElement, sourcePath;
    console.log('ThemeSelector.applyLocalTheme: entered');
    css = this.utils.getHumaneCssString();
    console.log("css=" + css);
    sourcePath = '/home/vturner/.atom/packages/humane-syntax/index.less';
    newStyleElement = this.localStylesElement.createStyleElement(css, sourcePath);
    this.localThemeManager.deleteThemeStyleNode();
    this.localThemeManager.addStyleElementToEditor(newStyleElement);
    return this.localThemeManager.syncEditorBackgroundColor();
  };

  LocalThemeSelectorView.prototype.destroy = function() {
    return this.selectorView.remove();
  };

  LocalThemeSelectorView.prototype.doIt = function() {
    return 7;
  };

  LocalThemeSelectorView.prototype.getElement = function() {
    console.log('ThemeSelector.getElement: entered');
    return this.selectorView;
  };

  LocalThemeSelectorView.prototype.getCurrentGlobalSyntaxTheme = function() {
    var activePackages, activeTheme, i, len, pkg;
    console.log('now in getCurrentGlobalSyntaxTheme');
    activePackages = atom.packages.getActivePackages();
    activeTheme = '';
    for (i = 0, len = activePackages.length; i < len; i++) {
      pkg = activePackages[i];
      if (pkg.metadata.theme === 'syntax') {
        activeTheme = pkg.metadata.name;
      }
    }
    return activeTheme;
  };

  return LocalThemeSelectorView;

})();

//# sourceMappingURL=local-theme-selector-view.js.map
