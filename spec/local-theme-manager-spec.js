// Generated by CoffeeScript 1.10.0
var $, LocalThemeManager, Utils, jQuery;

LocalThemeManager = require('../lib/local-theme-manager');

Utils = require('../lib/utils');

$ = jQuery = require('jquery');

fdescribe('LocalThemeManager', function() {
  beforeEach(function() {
    var mySpy, packageManager, textEditor, textEditorSpy, themeStyle;
    this.localThemeManager = new LocalThemeManager();
    this.utils = new Utils();
    packageManager = atom.packages;
    mySpy = spyOn(packageManager, "getActivePackages");
    mySpy.andReturn([
      {
        metadata: {
          theme: "syntax",
          name: "test-syntax-theme"
        }
      }
    ]);
    textEditor = atom.workspace.buildTextEditor();
    themeStyle = document.createElement('style');
    themeStyle.setAttribute('source-path', '/tmp/.atom/packages/test-theme/index.less');
    textEditor.getElement().shadowRoot.querySelector('atom-styles').appendChild(themeStyle);
    return textEditorSpy = spyOn(atom.workspace, "getActiveTextEditor").andReturn(textEditor);
  });
  it('ctor works', function() {
    console.log('utils=' + this.localThemeManager.utils);
    return expect(this.localThemeManager.utils).toBeInstanceOf(Utils);
  });
  it('doIt works', function() {
    console.log('local-theme-manager-spec.doIt: testing doIt');
    atom.packages.getActivePackages();
    return expect(this.localThemeManager.doIt()).toEqual(7);
  });
  return it('getActiveSyntaxTheme returns proper theme', function() {
    return expect(this.localThemeManager.getActiveSyntaxTheme()).toEqual("test-syntax-theme");
  });
});

fdescribe('LocalThemeManager with complex atom-text-editor style tree', function() {
  beforeEach(function() {
    var gutterStyle, mySpy, packageManager, spellCheckStyle, textEditor, textEditorSpy, themeStyle;
    this.localThemeManager = new LocalThemeManager();
    this.utils = new Utils();
    packageManager = atom.packages;
    mySpy = spyOn(packageManager, "getActivePackages");
    mySpy.andReturn([
      {
        metadata: {
          theme: "syntax",
          name: "test-syntax-theme"
        }
      }
    ]);
    textEditor = atom.workspace.buildTextEditor();
    spellCheckStyle = document.createElement('style');
    spellCheckStyle.setAttribute('source-path', '/tmp/.atom/packages/spellCheck/index.less');
    spellCheckStyle.setAttribute('priority', '0');
    gutterStyle = document.createElement('style');
    gutterStyle.setAttribute('source-path', '/tmp/.atom/packages/gutter/gutter.less');
    gutterStyle.setAttribute('priority', '0');
    themeStyle = document.createElement('style');
    themeStyle.setAttribute('source-path', '/tmp/.atom/packages/test-theme/index.less');
    themeStyle.setAttribute('priority', '1');
    textEditor.getElement().shadowRoot.querySelector('atom-styles').appendChild(spellCheckStyle);
    textEditor.getElement().shadowRoot.querySelector('atom-styles').appendChild(gutterStyle);
    textEditor.getElement().shadowRoot.querySelector('atom-styles').appendChild(themeStyle);
    return textEditorSpy = spyOn(atom.workspace, "getActiveTextEditor").andReturn(textEditor);
  });
  return it('deleteThemeStyleNode works', function() {
    var shadowRoot;
    console.log('local-theme-manager-spec: testing deleteThemeStyleNode');
    this.localThemeManager.deleteThemeStyleNode();
    shadowRoot = this.utils.getActiveShadowRoot();
    expect($(shadowRoot).find('atom-styles').find('style').length).toEqual(2);
    expect($(shadowRoot).find('atom-styles').find('style').eq(0).attr('source-path')).toMatch("spellCheck");
    return expect($(shadowRoot).find('atom-styles').find('style').eq(1).attr('source-path')).toMatch("gutter");
  });
});

//# sourceMappingURL=local-theme-manager-spec.js.map
