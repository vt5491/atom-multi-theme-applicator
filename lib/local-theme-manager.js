// Generated by CoffeeScript 1.10.0
var $, LocalThemeManager, Utils, fs, jQuery, less, path;

$ = jQuery = require('jquery');

Utils = require('./utils');

fs = require('fs-plus');

path = require('path');

less = require('less');

module.exports = LocalThemeManager = (function() {
  function LocalThemeManager() {
    this.utils = new Utils();
  }

  LocalThemeManager.prototype.doIt = function() {
    var getActivePackages;
    getActivePackages = atom.packages.getActivePackages;
    return 7;
  };

  LocalThemeManager.prototype.getActiveSyntaxTheme = function() {
    var activePackages, activeTheme, getActivePackages, i, len, pkg;
    console.log('LocalThemeManager.getActiveSyntaxTheme: entered');
    getActivePackages = atom.packages.getActivePackages;
    activePackages = atom.packages.getActivePackages();
    activeTheme = '';
    for (i = 0, len = activePackages.length; i < len; i++) {
      pkg = activePackages[i];
      if (pkg.metadata.theme === 'syntax') {
        activeTheme = pkg.metadata.name;
      }
    }
    return activeTheme;
  };

  LocalThemeManager.prototype.addStyleElementToEditor = function(styleElement) {
    var $shadowRoot, shadowRoot, themeNode;
    shadowRoot = this.utils.getActiveShadowRoot();
    $shadowRoot = $(shadowRoot);
    return themeNode = $shadowRoot.find('[context="atom-text-editor"]').filter('atom-styles').append(styleElement);
  };

  LocalThemeManager.prototype.deleteThemeStyleNode = function() {
    var $shadowRoot, shadowRoot, themeNode;
    console.log('LocalThemeManager.deleteThemeNode: now in deleteThemeNode');
    shadowRoot = this.utils.getActiveShadowRoot();
    console.log('deleteThemeNode: shadowRoot=' + shadowRoot);
    $shadowRoot = $(shadowRoot);
    themeNode = $shadowRoot.find('[context="atom-text-editor"]').filter('atom-styles').find('[priority="1"]').filter('[source-path*="index.less"]');
    if (themeNode.length !== 1) {
      console.log("LocalThemeManager.deleteThemeNode: could not properly identify the theme node");
      return -1;
    }
    return themeNode.remove();
  };

  LocalThemeManager.prototype.getThemeCss = function(basePath) {
    var data, lessPath, options, promise;
    console.log('LocalThemeManager.getThemeCss: entered');
    lessPath = basePath + "/index.less";
    data = fs.readFileSync(lessPath, 'utf8');
    console.log("data=" + data);
    data = data.toString();
    options = {
      paths: [basePath, basePath + '/styles'],
      filename: "index.less"
    };
    return promise = new Promise(function(resolve, reject) {
      console.log("about to call less.render");
      return less.render(data, options, function(err, result) {
        console.log("now in less.render function handler");
        if (err) {
          return reject(err);
        } else {
          console.log("genned css=" + result.css.substring(0, 100));
          return resolve(result.css.toString());
        }
      });
    });
  };

  LocalThemeManager.prototype.syncEditorBackgroundColor = function() {
    var activeTextEditor, localBgColor, localStyleNode, shadowRoot;
    shadowRoot = this.utils.getActiveShadowRoot();
    localStyleNode = $(shadowRoot).find('atom-styles').find('style').last();
    localBgColor = localStyleNode[0].sheet.rules[0].style.backgroundColor;
    console.log('syncEditorBackgroundColor: localBgColor=' + localBgColor);
    activeTextEditor = atom.workspace.getActiveTextEditor();
    return $(activeTextEditor).attr('style', 'background-color: ' + localBgColor);
  };

  return LocalThemeManager;

})();

//# sourceMappingURL=local-theme-manager.js.map
