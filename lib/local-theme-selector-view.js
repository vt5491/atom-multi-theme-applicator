// Generated by CoffeeScript 1.10.0
var $, LocalStylesElement, LocalThemeManager, LocalThemeSelectorView, Utils, async, fs, jQuery;

$ = jQuery = require('jquery');

Utils = require('./utils');

LocalThemeManager = require('./local-theme-manager');

LocalStylesElement = require('./local-styles-element');

fs = require('fs-plus');

async = require('async');

module.exports = LocalThemeSelectorView = (function() {
  var packageBaseDir;

  LocalThemeSelectorView.prototype.selectorView = null;

  LocalThemeSelectorView.prototype.ThemeLookup = [];

  packageBaseDir = '/home/vturner/.atom/packages/';

  LocalThemeSelectorView.prototype.ThemeLookup.push({
    themeName: 'choco',
    baseDir: packageBaseDir + "/choco"
  });

  LocalThemeSelectorView.prototype.ThemeLookup.push({
    themeName: 'humane-syntax',
    baseDir: packageBaseDir + "/humane-syntax"
  });

  LocalThemeSelectorView.prototype.ThemeLookup.push({
    themeName: 'seti-syntax',
    baseDir: packageBaseDir + "/seti-syntax"
  });

  function LocalThemeSelectorView(multiThemeApplicator) {
    var form, i, len, ref, theme, themeDropdown;
    this.multiThemeApplicator = multiThemeApplicator;
    this.localThemeManager = new LocalThemeManager();
    this.localStylesElement = new LocalStylesElement();
    this.utils = new Utils();
    this.selectorView = document.createElement('div');
    this.selectorView.classList.add('local-theme-selector-view');
    form = $('<form/>').attr({
      id: 'input-form'
    }).submit(this.applyLocalTheme.bind(this));
    form.appendTo(this.selectorView);
    $('<input/>').attr({
      type: 'text',
      name: 'theme'
    }).appendTo(form);
    $('<input/>').attr({
      type: 'submit',
      value: 'Apply Local Theme'
    }).appendTo(form);
    themeDropdown = $('<select id="themeDropdown" name="selectTheme">');
    ref = LocalThemeSelectorView.prototype.ThemeLookup;
    for (i = 0, len = ref.length; i < len; i++) {
      theme = ref[i];
      $('<option>', {
        value: theme.baseDir,
        text: theme.themeName
      }).appendTo(themeDropdown);
    }
    themeDropdown.appendTo(form);
  }

  LocalThemeSelectorView.prototype.applyLocalTheme = function() {
    var baseCssPath, cssResult, promise, sourcePath;
    console.log('ThemeSelector.applyLocalTheme: entered 2');
    baseCssPath = $("#themeDropdown").val();
    console.log("applyLocalTheme: baseCssPath=" + baseCssPath);
    sourcePath = baseCssPath + '/index.less';
    promise = this.localThemeManager.getThemeCss(baseCssPath);
    cssResult = null;
    return promise.then((function(_this) {
      return function(result) {
        var activeEditor, css, newStyleElement;
        console.log("->promise return: css=" + result.substring(0, 200));
        cssResult = result;
        console.log("cssResult-2=" + cssResult.substring(0, 200), css = cssResult);
        newStyleElement = _this.localStylesElement.createStyleElement(css, sourcePath);
        _this.localThemeManager.deleteThemeStyleNode();
        _this.localThemeManager.addStyleElementToEditor(newStyleElement);
        _this.localThemeManager.syncEditorBackgroundColor();
        activeEditor = atom.workspace.getActiveTextEditor();
        _this.multiThemeApplicator.toggle();
        return _this.multiThemeApplicator.toggle();
      };
    })(this), function(err) {
      return console.log("promise returner err" + err);
    });
  };

  LocalThemeSelectorView.prototype.destroy = function() {
    return this.selectorView.remove();
  };

  LocalThemeSelectorView.prototype.doIt = function() {
    return 7;
  };

  LocalThemeSelectorView.prototype.getElement = function() {
    console.log('ThemeSelector.getElement: entered');
    return this.selectorView;
  };

  LocalThemeSelectorView.prototype.getCurrentGlobalSyntaxTheme = function() {
    var activePackages, activeTheme, i, len, pkg;
    console.log('now in getCurrentGlobalSyntaxTheme');
    activePackages = atom.packages.getActivePackages();
    activeTheme = '';
    for (i = 0, len = activePackages.length; i < len; i++) {
      pkg = activePackages[i];
      if (pkg.metadata.theme === 'syntax') {
        activeTheme = pkg.metadata.name;
      }
    }
    return activeTheme;
  };

  return LocalThemeSelectorView;

})();

//# sourceMappingURL=local-theme-selector-view.js.map
