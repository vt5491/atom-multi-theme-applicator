// Generated by CoffeeScript 1.10.0
var $, LocalThemeManager, Utils, buildEditorTestEvironment, fs, jQuery, path;

LocalThemeManager = require('../lib/local-theme-manager');

Utils = require('../lib/utils');

$ = jQuery = require('jquery');

fs = require('fs');

path = require('path');

buildEditorTestEvironment = function() {
  var gutterStyle, spellCheckStyle, textEditor, textEditorSpy, themeStyle;
  textEditor = atom.workspace.buildTextEditor();
  spellCheckStyle = document.createElement('style');
  spellCheckStyle.setAttribute('source-path', '/tmp/.atom/packages/spellCheck/index.less');
  spellCheckStyle.setAttribute('priority', '0');
  gutterStyle = document.createElement('style');
  gutterStyle.setAttribute('source-path', '/tmp/.atom/packages/gutter/gutter.less');
  gutterStyle.setAttribute('priority', '0');
  themeStyle = document.createElement('style');
  themeStyle.setAttribute('source-path', '/tmp/.atom/packages/test-theme/index.less');
  themeStyle.setAttribute('priority', '1');
  textEditor.getElement().shadowRoot.querySelector('atom-styles').appendChild(spellCheckStyle);
  textEditor.getElement().shadowRoot.querySelector('atom-styles').appendChild(gutterStyle);
  textEditor.getElement().shadowRoot.querySelector('atom-styles').appendChild(themeStyle);
  textEditorSpy = spyOn(atom.workspace, "getActiveTextEditor").andReturn(textEditor);
  return textEditor;
};

describe('LocalThemeManager', function() {
  beforeEach(function() {
    var mySpy, packageManager, textEditor, textEditorSpy, themeStyle;
    this.localThemeManager = new LocalThemeManager();
    this.utils = new Utils();
    packageManager = atom.packages;
    mySpy = spyOn(packageManager, "getActivePackages");
    mySpy.andReturn([
      {
        metadata: {
          theme: "syntax",
          name: "test-syntax-theme"
        }
      }
    ]);
    textEditor = atom.workspace.buildTextEditor();
    atom.workspace.buildTextEditor();
    themeStyle = document.createElement('style');
    themeStyle.setAttribute('source-path', '/tmp/.atom/packages/test-theme/index.less');
    textEditor.getElement().shadowRoot.querySelector('atom-styles').appendChild(themeStyle);
    return textEditorSpy = spyOn(atom.workspace, "getActiveTextEditor").andReturn(this.textEditor);
  });
  it('ctor works', function() {
    console.log('utils=' + this.localThemeManager.utils);
    return expect(this.localThemeManager.utils).toBeInstanceOf(Utils);
  });
  it('doIt works', function() {
    console.log('local-theme-manager-spec.doIt: testing doIt');
    atom.packages.getActivePackages();
    return expect(this.localThemeManager.doIt()).toEqual(7);
  });
  it('getActiveSyntaxTheme returns proper theme', function() {
    return expect(this.localThemeManager.getActiveSyntaxTheme()).toEqual("test-syntax-theme");
  });
  return it('getThemeCss does promises correctly', function() {
    var cssResult, cssSnippet, promise;
    cssSnippet = "atom-text-editor, :host {\n  background-color: #e3d5c1;\n  color: #000000;";
    spyOn(fs, "readFile").andReturn(cssSnippet);
    promise = this.localThemeManager.getThemeCss('/home/vturner/.atom/packages/humane-syntax');
    expect(promise).toBeInstanceOf(Promise);
    cssResult = null;
    return promise.then(function(result) {
      console.log("->promise return: css=" + result.substring(0, 200));
      cssResult = result;
      return expect(cssResult).not.toBeNull();
    }, function(err) {
      return console.log("promise returner err" + err);
    });
  });
});

describe('LocalThemeManager with complex atom-text-editor style tree', function() {
  beforeEach(function() {
    var mySpy, packageManager;
    this.localThemeManager = new LocalThemeManager();
    this.utils = new Utils();
    packageManager = atom.packages;
    mySpy = spyOn(packageManager, "getActivePackages");
    mySpy.andReturn([
      {
        metadata: {
          theme: "syntax",
          name: "test-syntax-theme"
        }
      }
    ]);
    return this.textEditor = buildEditorTestEvironment();
  });
  it('deleteThemeStyleNode works', function() {
    var shadowRoot;
    console.log('local-theme-manager-spec: testing deleteThemeStyleNode');
    this.localThemeManager.deleteThemeStyleNode();
    shadowRoot = this.utils.getActiveShadowRoot();
    expect($(shadowRoot).find('atom-styles').find('style').length).toEqual(2);
    expect($(shadowRoot).find('atom-styles').find('style').eq(0).attr('source-path')).toMatch("spellCheck");
    return expect($(shadowRoot).find('atom-styles').find('style').eq(1).attr('source-path')).toMatch("gutter");
  });
  it('addStyleElementToEditor', function() {
    var shadowRoot, styleElement;
    console.log('local-theme-manager-spec: testing addStyleElementToEditor');
    styleElement = $('<style>').attr('source-path', '/tmp/dummy-path').attr('context', 'atom-text-editor').attr('priority', '1');
    this.localThemeManager.addStyleElementToEditor(styleElement);
    shadowRoot = this.utils.getActiveShadowRoot();
    return expect($(shadowRoot).find('atom-styles').find('style').length).toEqual(4);
  });
  return xit('syncEditorBackgroundColor works', function() {
    return console.log('syncEditorBackgroundColor: @textEditor=' + this.textEditor);
  });
});

//# sourceMappingURL=local-theme-manager-spec.js.map
