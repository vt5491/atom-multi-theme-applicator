// Generated by CoffeeScript 1.10.0
var $, LocalThemeManager, Utils, fs, jQuery, less, path;

$ = jQuery = require('jquery');

Utils = require('./utils');

fs = require('fs');

path = require('path');

less = require('less');

module.exports = LocalThemeManager = (function() {
  function LocalThemeManager() {
    this.utils = new Utils();
  }

  LocalThemeManager.prototype.doIt = function() {
    var getActivePackages;
    getActivePackages = atom.packages.getActivePackages;
    return 7;
  };

  LocalThemeManager.prototype.getActiveSyntaxTheme = function() {
    var activePackages, activeTheme, getActivePackages, i, len, pkg;
    console.log('LocalThemeManager.getActiveSyntaxTheme: entered');
    getActivePackages = atom.packages.getActivePackages;
    activePackages = atom.packages.getActivePackages();
    activeTheme = '';
    for (i = 0, len = activePackages.length; i < len; i++) {
      pkg = activePackages[i];
      if (pkg.metadata.theme === 'syntax') {
        activeTheme = pkg.metadata.name;
      }
    }
    return activeTheme;
  };

  LocalThemeManager.prototype.deleteThemeStyleNode = function() {
    var $shadowRoot, shadowRoot, themeNode;
    console.log('LocalThemeManager.deleteThemeNode: now in deleteThemeNode');
    shadowRoot = this.utils.getActiveShadowRoot();
    console.log('deleteThemeNode: shadowRoot=' + shadowRoot);
    $shadowRoot = $(shadowRoot);
    themeNode = $shadowRoot.find('[context="atom-text-editor"]').filter('atom-styles').find('[priority="1"]').filter('[source-path*="index.less"]');
    if (themeNode.length !== 1) {
      console.log("LocalThemeManager.deleteThemeNode: could not properly identify the theme node");
      return -1;
    }
    return themeNode.remove();
  };

  LocalThemeManager.prototype.getThemeCss = function() {
    var basePath, lessPath;
    console.log('LocalThemeManager.getThemeCss: entered');
    basePath = '/home/vturner/.atom/packages/';
    lessPath = basePath + 'humane-syntax/index.less';
    return fs.readFile(lessPath, function(err, data) {
      var options;
      if (err) {
        throw "cat: error reading from " + fn + ": " + err;
      }
      console.log("data=" + data);
      data = data.toString();
      options = {
        paths: ['/home/vturner/.atom/packages/humane-syntax/'],
        filename: "index.less"
      };
      return less.render(data, options, function(e, css) {
        return console.log("genned css=" + css);
      });
    });
  };

  return LocalThemeManager;

})();

//# sourceMappingURL=local-theme-manager.js.map
