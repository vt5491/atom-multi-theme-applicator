// Generated by CoffeeScript 1.10.0
var $, CompositeDisposable, LocalStylesElement, LocalThemeManager, LocalThemeSelectorView, Utils, fs, jQuery;

$ = jQuery = require('jquery');

CompositeDisposable = require('atom').CompositeDisposable;

Utils = require('./utils');

LocalThemeManager = require('./local-theme-manager');

LocalStylesElement = require('./local-styles-element');

fs = require('fs-plus');

module.exports = LocalThemeSelectorView = (function() {
  var packageBaseDir;

  LocalThemeSelectorView.prototype.selectorView = null;

  LocalThemeSelectorView.prototype.ThemeLookup = [];

  packageBaseDir = '/home/vturner/.atom/packages/';

  LocalThemeSelectorView.prototype.ThemeLookup.push({
    themeName: 'choco',
    baseDir: packageBaseDir + "/choco"
  });

  LocalThemeSelectorView.prototype.ThemeLookup.push({
    themeName: 'humane-syntax',
    baseDir: packageBaseDir + "/humane-syntax"
  });

  LocalThemeSelectorView.prototype.ThemeLookup.push({
    themeName: 'seti-syntax',
    baseDir: packageBaseDir + "/seti-syntax"
  });

  function LocalThemeSelectorView(multiThemeApplicator) {
    var form, i, len, ref, theme, themeDropdown;
    this.multiThemeApplicator = multiThemeApplicator;
    this.localThemeManager = new LocalThemeManager();
    this.localStylesElement = new LocalStylesElement();
    this.utils = new Utils();
    this.selectorView = document.createElement('div');
    this.selectorView.classList.add('local-theme-selector-view');
    $('.local-theme-selector-view').attr({
      tabindex: '0'
    });
    form = $('<form/>').attr({
      id: 'input-form',
      "class": 'apply-theme-form'
    }).submit(this.applyLocalTheme.bind(this));
    form.appendTo(this.selectorView);
    $('<label>').text('Syntax Theme:').appendTo(form);
    this.dropDownBorderWidthDefault;
    themeDropdown = $('<select id="themeDropdown" name="selectTheme">');
    themeDropdown.focus((function(_this) {
      return function() {
        var newBorderWidth;
        console.log("now in themeDropdown focus handler");
        _this.dropDownBorderWidthDefault = $('#themeDropdown').css('borderWidth');
        console.log("dropDownBorderWidthDefault=" + _this.dropDownBorderWidthDefault);
        newBorderWidth = parseInt(_this.dropDownBorderWidthDefault) * 2.0;
        console.log("newBorderWidth=" + newBorderWidth);
        $('#themeDropdown').css('borderWidth', newBorderWidth.toString());
        console.log("now leaving themeDropdown focus handler");
        console.log("this.css.borderWidth=" + $('#themeDropdown').css('borderWidth'));
        return console.log("now leaving themeDropdown focus handler-2");
      };
    })(this));
    themeDropdown.blur((function(_this) {
      return function() {
        console.log("now in themeDropdown blur handler");
        return $('#themeDropdown').css('borderWidth', _this.dropDownBorderWidthDefault);
      };
    })(this));
    this.themeLookup = this.localThemeManager.getSyntaxThemeLookup();
    ref = this.themeLookup;
    for (i = 0, len = ref.length; i < len; i++) {
      theme = ref[i];
      $('<option>', {
        value: theme.baseDir,
        text: theme.themeName
      }).appendTo(themeDropdown);
    }
    themeDropdown.appendTo(form);
    $('<input id="apply-theme-submit"/>').attr({
      type: 'submit',
      value: 'Apply Local Theme'
    }).appendTo(form);
    this.themeLookupActiveIndex = 0;
    this.subscriptions = new CompositeDisposable;
    this.subscriptions.add(atom.commands.add('atom-workspace', {
      'multi-theme-applicator:applyLocalTheme': (function(_this) {
        return function() {
          return _this.applyLocalTheme();
        };
      })(this),
      'local-theme-selector-view:focusModalPanel': (function(_this) {
        return function() {
          return _this.focusModalPanel();
        };
      })(this)
    }));
    this.subscriptions.add(atom.commands.add('.local-theme-selector-view', {
      'local-theme-selector-view:applyLocalTheme': (function(_this) {
        return function() {
          return _this.applyLocalTheme();
        };
      })(this),
      'local-theme-selector-view:selectPrevTheme': (function(_this) {
        return function() {
          return _this.selectPrevTheme();
        };
      })(this),
      'local-theme-selector-view:selectNextTheme': (function(_this) {
        return function() {
          return _this.selectNextTheme();
        };
      })(this)
    }));
  }

  LocalThemeSelectorView.prototype.selectNextTheme = function() {
    this.themeLookupActiveIndex++;
    this.themeLookupActiveIndex %= this.themeLookup.length;
    return $("#themeDropdown").val(this.themeLookup[this.themeLookupActiveIndex].baseDir);
  };

  LocalThemeSelectorView.prototype.selectPrevTheme = function() {
    this.themeLookupActiveIndex--;
    if (this.themeLookupActiveIndex < 0) {
      this.themeLookupActiveIndex = this.themeLookup.length - 1;
    }
    return $("#themeDropdown").val(this.themeLookup[this.themeLookupActiveIndex].baseDir);
  };

  LocalThemeSelectorView.prototype.focusModalPanel = function() {
    console.log("LocalThemeSelectorView.focusModalPanel: entered");
    return $('#themeDropdown').focus();
  };

  LocalThemeSelectorView.prototype.applyLocalTheme = function() {
    var baseCssPath, cssResult, promise, sourcePath;
    console.log('ThemeSelector.applyLocalTheme: entered 2');
    baseCssPath = $("#themeDropdown").val();
    console.log("applyLocalTheme: baseCssPath=" + baseCssPath);
    sourcePath = baseCssPath + '/index.less';
    promise = this.localThemeManager.getThemeCss(baseCssPath);
    cssResult = null;
    return promise.then((function(_this) {
      return function(result) {
        var activeEditor, css, newStyleElement;
        console.log("->promise return: css=" + result.substring(0, 200));
        cssResult = result;
        console.log("cssResult-2=" + cssResult.substring(0, 200), css = cssResult);
        newStyleElement = _this.localStylesElement.createStyleElement(css, sourcePath);
        _this.localThemeManager.deleteThemeStyleNode();
        _this.localThemeManager.addStyleElementToEditor(newStyleElement);
        _this.localThemeManager.syncEditorBackgroundColor();
        activeEditor = atom.workspace.getActiveTextEditor();
        _this.multiThemeApplicator.toggle();
        return _this.multiThemeApplicator.toggle();
      };
    })(this), function(err) {
      return console.log("promise returner err" + err);
    });
  };

  LocalThemeSelectorView.prototype.destroy = function() {
    return this.selectorView.remove();
  };

  LocalThemeSelectorView.prototype.doIt = function() {
    return 7;
  };

  LocalThemeSelectorView.prototype.getElement = function() {
    console.log('ThemeSelector.getElement: entered');
    return this.selectorView;
  };

  LocalThemeSelectorView.prototype.getCurrentGlobalSyntaxTheme = function() {
    var activePackages, activeTheme, i, len, pkg;
    console.log('now in getCurrentGlobalSyntaxTheme');
    activePackages = atom.packages.getActivePackages();
    activeTheme = '';
    for (i = 0, len = activePackages.length; i < len; i++) {
      pkg = activePackages[i];
      if (pkg.metadata.theme === 'syntax') {
        activeTheme = pkg.metadata.name;
      }
    }
    return activeTheme;
  };

  return LocalThemeSelectorView;

})();

//# sourceMappingURL=local-theme-selector-view.js.map
